// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/git_wrapper/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	git_wrapper "operarius/pkg/git_wrapper"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/guardrailsio/go-scan-helper/logger"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddWorktree mocks base method.
func (m *MockIRepository) AddWorktree(path, commitSHA string) (*git_wrapper.Worktree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorktree", path, commitSHA)
	ret0, _ := ret[0].(*git_wrapper.Worktree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWorktree indicates an expected call of AddWorktree.
func (mr *MockIRepositoryMockRecorder) AddWorktree(path, commitSHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorktree", reflect.TypeOf((*MockIRepository)(nil).AddWorktree), path, commitSHA)
}

// Branches mocks base method.
func (m *MockIRepository) Branches() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branches")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Branches indicates an expected call of Branches.
func (mr *MockIRepositoryMockRecorder) Branches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branches", reflect.TypeOf((*MockIRepository)(nil).Branches))
}

// CheckoutBranch mocks base method.
func (m *MockIRepository) CheckoutBranch(branch string) (*git_wrapper.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", branch)
	ret0, _ := ret[0].(*git_wrapper.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockIRepositoryMockRecorder) CheckoutBranch(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockIRepository)(nil).CheckoutBranch), branch)
}

// CheckoutCommit mocks base method.
func (m *MockIRepository) CheckoutCommit(commit string) (*git_wrapper.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutCommit", commit)
	ret0, _ := ret[0].(*git_wrapper.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutCommit indicates an expected call of CheckoutCommit.
func (mr *MockIRepositoryMockRecorder) CheckoutCommit(commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutCommit", reflect.TypeOf((*MockIRepository)(nil).CheckoutCommit), commit)
}

// Fetch mocks base method.
func (m *MockIRepository) Fetch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIRepositoryMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIRepository)(nil).Fetch))
}

// FlushWorktree mocks base method.
func (m *MockIRepository) FlushWorktree() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushWorktree")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushWorktree indicates an expected call of FlushWorktree.
func (mr *MockIRepositoryMockRecorder) FlushWorktree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushWorktree", reflect.TypeOf((*MockIRepository)(nil).FlushWorktree))
}

// GetDestination mocks base method.
func (m *MockIRepository) GetDestination() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestination")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDestination indicates an expected call of GetDestination.
func (mr *MockIRepositoryMockRecorder) GetDestination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestination", reflect.TypeOf((*MockIRepository)(nil).GetDestination))
}

// Load mocks base method.
func (m *MockIRepository) Load(url, dest string) *git_wrapper.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", url, dest)
	ret0, _ := ret[0].(*git_wrapper.Repository)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockIRepositoryMockRecorder) Load(url, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockIRepository)(nil).Load), url, dest)
}

// Pull mocks base method.
func (m *MockIRepository) Pull() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockIRepositoryMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockIRepository)(nil).Pull))
}

// RemoveRepository mocks base method.
func (m *MockIRepository) RemoveRepository() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockIRepositoryMockRecorder) RemoveRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockIRepository)(nil).RemoveRepository))
}

// SetBasicAuthHeader mocks base method.
func (m *MockIRepository) SetBasicAuthHeader(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBasicAuthHeader", arg0)
}

// SetBasicAuthHeader indicates an expected call of SetBasicAuthHeader.
func (mr *MockIRepositoryMockRecorder) SetBasicAuthHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBasicAuthHeader", reflect.TypeOf((*MockIRepository)(nil).SetBasicAuthHeader), arg0)
}

// SetPrivate mocks base method.
func (m *MockIRepository) SetPrivate(isPrivate bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrivate", isPrivate)
}

// SetPrivate indicates an expected call of SetPrivate.
func (mr *MockIRepositoryMockRecorder) SetPrivate(isPrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivate", reflect.TypeOf((*MockIRepository)(nil).SetPrivate), isPrivate)
}

// SetProtol mocks base method.
func (m *MockIRepository) SetProtol(protocol string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProtol", protocol)
}

// SetProtol indicates an expected call of SetProtol.
func (mr *MockIRepositoryMockRecorder) SetProtol(protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProtol", reflect.TypeOf((*MockIRepository)(nil).SetProtol), protocol)
}

// UpdateRemoteOrigin mocks base method.
func (m *MockIRepository) UpdateRemoteOrigin(remoteUrl string, logger logger.ILogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteOrigin", remoteUrl, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteOrigin indicates an expected call of UpdateRemoteOrigin.
func (mr *MockIRepositoryMockRecorder) UpdateRemoteOrigin(remoteUrl, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteOrigin", reflect.TypeOf((*MockIRepository)(nil).UpdateRemoteOrigin), remoteUrl, logger)
}
